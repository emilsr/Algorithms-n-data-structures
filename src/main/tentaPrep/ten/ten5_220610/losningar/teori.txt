1. För att testa praktiskt behöver man implementera en algoritm och göra det bra och rättvist. Det tar tid och kan vara svårt. Man behöver också bestämma vilka indata man behöver testa med. För vissa problem kan körningarna bli långa alternativt om vi använder mindre tester riskerar vi att overheaden påverkar resultaten.

Ett teoretiskt resonemang ger en mera allmängiltig bild av vad vi kan förvänta oss av prestandan och hur denna kommer bero på storleken av problemet. Det kan ibland ge ett tydligt och enkelt resultat när man tex ska välja mellan två algoritmer. Det går ofta mycket fortare än att testa praktiskt. En teoretisk analys kan ge oss ledtrådar för hur vi kan förbättra algoritmen.

2. En länkad lista består av noder där varje nod innehåller ett data och en länk till nästa nod. Vi når noderna genom att börja vid första och stega framåt (egventuellt har vi en länk också till sista).  En array består av en array där varje plats nås via index. Den länkade listan är aldrig onödigt stor utan växer och krymper dynamiskt vid behov. Priset är dock att den måste ha en länk per datalänk så den tar alltid dubbelt så mycket minne som en full array. Arrayen å sin sida kan som värst vara bara halvfull om listan bara växer och fjärdedelsfull om den också krymper (förutasatt att implementeringen krymper arrayen vilket inte är så vanligt). Arrayen har också problemet att när arrayen är full blir nästa add även sist O(n). Att komma åt en viss plats är O(n) för den länkade listan och O(1) för arrayen. Att sätta in ett element eller ta bort ett element är O(n) för arrayen men O(1) i den länkade listan om vi har platsen. I praktiken är det oftast rätt att välja arrayen inte pga ordo-resonemang utan pga att den faktiska tidsåtgången (konstantfaktorn) är större för den länkade listan.

Som vanligt beöver man inte ha med allt detta för att få full poäng.